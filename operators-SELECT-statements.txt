1. Write out a generic SELECT statement.

SELECT * FROM Customers;

2. Create a fun way to remember the order of operations in a SELECT statement, such as a mnemonic.

Single -SELECT
Female -FROM
White  -WHERE


3. Given this dogs table, write queries to select the following pieces of data:
Intake teams typically guess the breed of shelter dogs, so the breed column may have multiple words (for example, "Labrador Collie mix").

    A. Display the name, gender, and age of all dogs that are part Labrador.
	SELECT from dogs WHERE 
    -SELECT name,gender,age FROM dogs WHERE breed LIKE '%labrador%'

    B. Display the ids of all dogs that are under 1 year old.
	-SELECT id FROM dogs WHERE age < 1;
   
    C. Display the name and age of all dogs that are female and over 35lbs.
	-SELECT name,age FROM dogs WHERE gender='F' AND weight>30;
    
    D. Display all of the information about all dogs that are not Shepherd mixes.
	-SELECT * FROM dogs WHERE breed NOT LIKE '%shepherd%';
    
    E. Display the id, age, weight, and breed of all dogs that are either over 60lbs or Great Danes.
	-SELECT id,age,weight,breed FROM dogs WHERE weight > 60 OR breed='great dane';
    
4. Given this cats table, what records are returned from these queries?

    A. SELECT name, adoption_date FROM cats;
    name		adoption_date
	Mushi		2016-03-22T00:00:00.000Z
	Seashell	null
	Azul		2016-04-17T00:00:00.000Z
	Victoire	2016-09-01T00:00:00.000Z

    B. SELECT name, age FROM cats;
    name		age
	Mushi		1
	Seashell	7
	Azul		3
	Victoire	7
	Nala		1    

5. From the cats table, write queries to select the following pieces of data.

    A. Display all the information about all of the available cats.
	-SELECT * FROM cats WHERE adoption_date IS NULL;
    
    B. Choose one cat of each age to show to potential adopters.
	-SELECT name, gender FROM cats WHERE age = 7;
    
    C. Find all of the names of the cats, so you don’t choose duplicate names for new cats.
	-SELECT name from cats;
    
6. List each comparison operator and explain when you would use it. Include a real world example for each.

>   Greater than. This represents all data types greater than a defined minimum. Search for all users over the age of 18.
<   Less than. This represents all data types less than a defined maximum. Search for all users under the age of 18.
>=  Greater than or equal to. This is greater than OR equal to a defined minimum. Search for all users whose age is greater than or equal to 18.
<=   Less than or equal to. This is less than OR equal to a defined minimum. Search for all users whose age is less than or equal to 18.
=   Equals. This determines if two data types are exact equals . Search to see if a user is from a certain state. 
!=/<> Does not equal. My age does not equal 50.
LIKE contains part of search in name. Example is name LIKE '%bob%' would return bob, bobby, hob bob.
AND   This is a logical operator used to define to condition checks. We could use this if we wanted to find all users who are over 18 and have a driver's license. Example is WHERE age > 18 AND license = TRUE;).
OR   This logical operator defines the acceptance of at least one of several condition checks. We could check for all users who either under 18 or over 88. Example is WHERE age < 18 OR age > 88;).
NOT returns everything except what you are defining. Example is NOT LIKE '%bob%' which would return any name without the word 'bob' in it.
    

7. From the cats table, what data is returned from these queries?

    A. SELECT name FROM cats WHERE gender = ‘F’;
	name
    Seashell
    Nala
   
    B. SELECT name FROM cats WHERE age <> 3;
	name
    Mushi
    Seashell
    Victoire
    Nala
    
    C. SELECT ID FROM cats WHERE name != ‘Mushi’ AND gender = ‘M’;
	id
    3
    4
    